<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Pulse Code</title>
    <link>/tags/linux/</link>
    <description>Recent content in linux on Pulse Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terminal &amp; WSL Guide</title>
      <link>/blog/terminal-wsl/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/terminal-wsl/</guid>
      <description>&lt;p&gt;I&#39;ve found using Windows Subsystem For Linux (WSL) in the last two years has transformed how I use my Windows machine for development and general tech &amp;amp; cloud work. The new Terminal has further cemented this new reliance on the command line.&lt;/p&gt;
&lt;p&gt;Seems like I&#39;m not alone, lots of people seem very interested in the new &lt;a href=&#34;https://github.com/microsoft/terminal&#34;&gt;Windows Terminal&lt;/a&gt; and also how to use it with WSL. I&#39;ve just been though the process of a fresh setup of the new Terminal &amp;amp; WSL from scratch, so I figured it was a good time to write up how I set it up and use it.&lt;/p&gt;
&lt;p&gt;I&#39;ve already written about WSL v2 in a previous post, and as it&#39;s still a bit experimental it&#39;s probably worth ignoring for now. With that in mind everything I&#39;ll run through will assume you&#39;re setting up &amp;amp; using WSL v1 just to keep it simple (for now). I&#39;m going to keep thing pretty to the point and factual as much a possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting On The Go Kart</title>
      <link>/blog/getting-on-the-go-kart/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/getting-on-the-go-kart/</guid>
      <description>I&#39;ve dabbled with the Go programming language in the past, and came away with mixed feelings. However I&#39;ve resolved to a have an extra &amp;ldquo;main&amp;rdquo; language to go alongside JavaScript/Node and Python (with C#, Java and PHP being long consigned to the &amp;ldquo;only if I must bucket&amp;rdquo;), so decided to revisit Go and get some real usage of the language under my belt. In addition some recent tooling changes means it has become a lot easier to work with, so it was time for a second look.</description>
    </item>
    
    <item>
      <title>On The Bleeding Edge with WSL2</title>
      <link>/blog/wsl2/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/wsl2/</guid>
      <description>I&#39;ve been a huge fan of WSL (Windows Subsystem for Linux) since it first came to Windows 10. In fact it&#39;s fair to say it has completely transformed how I do local development, run tools and my whole workflow. Naturally I was very interested in the news from Build announcing a new version of WSL, which seems to go by the rather functional (if descriptive) name &amp;ldquo;WSL2&amp;rdquo;
I&#39;m not going to get too deep into what&#39;s new and exciting with WSL2, as I think the announcement blog covers it nicely</description>
    </item>
    
  </channel>
</rss>